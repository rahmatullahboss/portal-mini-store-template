import type { CollectionAfterChangeHook } from 'payload'

const orderStatusUpdate: CollectionAfterChangeHook = async ({ doc, previousDoc, operation, req }) => {
  // Only process updates, not creates
  if (operation !== 'update') return doc

  const payload = req?.payload
  if (!payload) return doc

  // Check if status has changed
  const previousStatus = (previousDoc as any)?.status
  const currentStatus = (doc as any)?.status

  if (!previousStatus || !currentStatus || previousStatus === currentStatus) {
    return doc
  }

  try {
    const serverURL = (payload?.config as any)?.serverURL || process.env.NEXT_PUBLIC_SERVER_URL || ''
    const companyName = process.env.EMAIL_DEFAULT_FROM_NAME || 'Online Bazar'
    
    const orderId = (doc as any).id
    const customerName = String((doc as any).customerName || '')
    const customerEmail = String((doc as any).customerEmail || '')

    // Status messages in Bangla
    const statusMessages = {
      pending: {
        subject: `‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ #${orderId} ‡¶è‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶Æ‡¶æ‡¶®`,
        message: '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ü‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶è‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶Ø‡¶º ‡¶Ü‡¶õ‡¶ø‡•§',
        icon: '‚è≥'
      },
      processing: {
        subject: `‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ #${orderId} ‡¶è‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ß‡ßÄ‡¶®`,
        message: '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ü‡¶ø ‡¶è‡¶ñ‡¶® ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ß‡ßÄ‡¶® ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶£‡ßç‡¶Ø‡¶ó‡ßÅ‡¶≤‡ßã ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶ï‡¶∞‡¶õ‡¶ø‡•§',
        icon: 'üîÑ'
      },
      shipped: {
        subject: `‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ #${orderId} ‡¶è‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: ‡¶∂‡¶ø‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá`,
        message: '‡¶¶‡ßÅ‡¶∞‡ßç‡¶¶‡¶æ‡¶®‡ßç‡¶§ ‡¶ñ‡¶¨‡¶∞! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ü‡¶ø ‡¶∂‡¶ø‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶™‡ßå‡¶Å‡¶õ‡¶æ‡¶¨‡ßá‡•§',
        icon: 'üì¶'
      },
      completed: {
        subject: `‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ #${orderId} ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá`,
        message: '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ü‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∂‡¶™‡¶ø‡¶Ç ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶‡•§',
        icon: '‚úÖ'
      },
      cancelled: {
        subject: `‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ #${orderId} ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá`,
        message: '‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ü‡¶ø ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
        icon: '‚ùå'
      },
      refunded: {
        subject: `‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ #${orderId} ‡¶è‡¶∞ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá`,
        message: '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶´‡ßá‡¶∞‡¶§ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡ß©-‡ß´ ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶¶‡¶ø‡¶¨‡¶∏‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶´‡ßá‡¶∞‡¶§ ‡¶™‡¶æ‡¶¨‡ßá‡¶®‡•§',
        icon: 'üí∞'
      }
    }

    const statusInfo = statusMessages[currentStatus as keyof typeof statusMessages]
    if (!statusInfo) return doc

    const orderDate = (doc as any).orderDate ? new Date((doc as any).orderDate) : new Date()
    const orderDateStr = orderDate.toISOString().slice(0, 10)
    const year = new Date().getFullYear()

    // Get order items for email
    const items: any[] = Array.isArray((doc as any).items) ? ((doc as any).items as any[]) : []
    const detailed: { name: string; quantity: number; price?: number }[] = []
    
    for (const it of items) {
      let name = 'Item'
      let price: number | undefined
      let snackId: string | undefined

      const rel = (it as any)?.item
      if (rel && typeof rel === 'object') {
        if (typeof (rel as any).name === 'string') name = (rel as any).name
        if (typeof (rel as any).price === 'number') price = Number((rel as any).price)
        if (typeof (rel as any).id === 'string' || typeof (rel as any).id === 'number') {
          snackId = String((rel as any).id)
        }
      } else if (rel != null && (typeof rel === 'string' || typeof rel === 'number')) {
        snackId = String(rel)
      }

      if ((!name || name === 'Item' || typeof price !== 'number') && snackId) {
        try {
          const itemDoc = await payload?.findByID({ collection: 'items', id: snackId })
          if (itemDoc) {
            if ((itemDoc as any).name && (!name || name === 'Item')) name = (itemDoc as any).name
            if (typeof (itemDoc as any).price === 'number' && typeof price !== 'number') {
              price = Number((itemDoc as any).price)
            }
          }
        } catch {}
      }

      detailed.push({ name: name || 'Item', quantity: Number((it as any)?.quantity ?? 1), price })
    }

    const total = Number((doc as any).totalAmount || 0)
    const fmt = (n: number) => `‡ß≥${n.toFixed(2)}`

    const rowsHTML = detailed
      .map((d) => `<tr><td style="padding:6px 8px;border:1px solid #e5e7eb;">${d.name}</td><td style="padding:6px 8px;border:1px solid #e5e7eb;text-align:center;">${d.quantity}</td><td style="padding:6px 8px;border:1px solid #e5e7eb;text-align:right;">${typeof d.price === 'number' ? fmt(d.price) : '-'}</td></tr>`) 
      .join('')

    // Status-specific styling
    const statusColors = {
      pending: '#f59e0b',
      processing: '#3b82f6', 
      shipped: '#8b5cf6',
      completed: '#10b981',
      cancelled: '#ef4444',
      refunded: '#6b7280'
    }

    const statusColor = statusColors[currentStatus as keyof typeof statusColors] || '#6b7280'

    const bodyHTML = `
      <div style="font-family:ui-sans-serif,system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif;color:#111827;max-width:600px;margin:0 auto;">
        <div style="background:${statusColor};color:white;padding:20px;text-align:center;border-radius:8px 8px 0 0;">
          <h1 style="margin:0;font-size:24px;">${statusInfo.icon} ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü</h1>
        </div>
        
        <div style="padding:20px;border:1px solid #e5e7eb;border-top:none;border-radius:0 0 8px 8px;">
          <p>‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã ${customerName || '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï'},</p>
          <p>${statusInfo.message}</p>
          
          <div style="background:#f9fafb;padding:16px;border-radius:8px;margin:16px 0;">
            <p style="margin:0;"><strong>‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø:</strong> #${orderId}</p>
            <p style="margin:8px 0 0 0;"><strong>‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏:</strong> <span style="color:${statusColor};font-weight:bold;">${statusInfo.icon} ${statusInfo.subject.split(': ')[1]}</span></p>
            <p style="margin:8px 0 0 0;"><strong>‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ:</strong> ${orderDateStr}</p>
          </div>

          <h3 style="margin:20px 0 10px 0;color:#374151;">‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£</h3>
          <table cellpadding="0" cellspacing="0" style="border-collapse:collapse;border:1px solid #e5e7eb;width:100%;">
            <thead>
              <tr style="background:#f9fafb;">
                <th align="left" style="padding:12px 8px;border:1px solid #e5e7eb;font-weight:600;">‡¶™‡¶£‡ßç‡¶Ø</th>
                <th align="center" style="padding:12px 8px;border:1px solid #e5e7eb;font-weight:600;">‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£</th>
                <th align="right" style="padding:12px 8px;border:1px solid #e5e7eb;font-weight:600;">‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø</th>
              </tr>
            </thead>
            <tbody>
              ${rowsHTML}
            </tbody>
          </table>

          <p style="margin-top:16px;text-align:right;font-size:18px;"><strong>‡¶Æ‡ßã‡¶ü ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø: ${fmt(total)}</strong></p>

          ${serverURL ? `<div style="text-align:center;margin:24px 0;"><a href="${serverURL}" target="_blank" style="background:${statusColor};color:white;padding:12px 24px;text-decoration:none;border-radius:6px;display:inline-block;">‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®</a></div>` : ''}

          <p style="margin-top:20px;">‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∂‡¶™‡¶ø‡¶Ç ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!</p>
          <p style="margin:16px 0 0 0;">‡¶∂‡ßÅ‡¶≠‡ßá‡¶ö‡ßç‡¶õ‡¶æ‡¶®‡ßç‡¶§‡ßá,<br/><strong>${companyName} ‡¶ü‡¶ø‡¶Æ</strong></p>
        </div>

        <div style="text-align:center;padding:16px;color:#6b7280;font-size:12px;">
          ¬© ${year} ${companyName}. ‡¶∏‡¶∞‡ßç‡¶¨‡¶∏‡ßç‡¶¨‡¶§‡ßç‡¶¨ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§‡•§
        </div>
      </div>
    `

    const bodyText = [
      `‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã ${customerName || '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï'},`,
      '',
      statusInfo.message,
      '',
      `‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø: #${orderId}`,
      `‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: ${statusInfo.subject.split(': ')[1]}`,
      `‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${orderDateStr}`,
      '',
      '‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£:',
      ...detailed.map((d) => `- ${d.name} x ${d.quantity} ${typeof d.price === 'number' ? `(${fmt(d.price)})` : ''}`),
      '',
      `‡¶Æ‡ßã‡¶ü ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø: ${fmt(total)}`,
      '',
      serverURL ? `‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø: ${serverURL}` : '',
      '',
      `‡¶∂‡ßÅ‡¶≠‡ßá‡¶ö‡ßç‡¶õ‡¶æ‡¶®‡ßç‡¶§‡ßá,\n${companyName} ‡¶ü‡¶ø‡¶Æ`,
      `¬© ${year} ${companyName}. ‡¶∏‡¶∞‡ßç‡¶¨‡¶∏‡ßç‡¶¨‡¶§‡ßç‡¶¨ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§‡•§`,
    ].filter(Boolean).join('\n')

    // Send status update email to customer
    if (customerEmail) {
      await payload?.sendEmail?.({
        to: customerEmail,
        subject: statusInfo.subject,
        text: bodyText,
        html: bodyHTML,
      })

      req?.payload?.logger?.info?.(`Order status update email sent to ${customerEmail} for order #${orderId}: ${previousStatus} -> ${currentStatus}`)
    }

    // Send admin notification
    const adminEmail = process.env.ORDER_NOTIFICATIONS_EMAIL || process.env.GMAIL_USER
    if (adminEmail) {
      const adminHTML = `
        <div style="font-family:Arial,sans-serif;">
          <h3>Order Status Updated</h3>
          <p><strong>Order ID:</strong> #${orderId}</p>
          <p><strong>Customer:</strong> ${customerName} &lt;${customerEmail}&gt;</p>
          <p><strong>Status Change:</strong> <span style="color:#6b7280;">${previousStatus}</span> ‚Üí <span style="color:${statusColor};font-weight:bold;">${currentStatus}</span></p>
          <p><strong>Total:</strong> ‡ß≥${total.toFixed(2)}</p>
          ${serverURL ? `<p><a href="${serverURL}/admin/collections/orders/${orderId}">View in Admin</a></p>` : ''}
        </div>
      `

      await payload?.sendEmail?.({
        to: adminEmail,
        subject: `Order #${orderId} Status: ${previousStatus} ‚Üí ${currentStatus}`,
        html: adminHTML,
      })
    }

  } catch (error) {
    req?.payload?.logger?.error?.('Order status update notification failed', error as any)
  }

  return doc
}

export default orderStatusUpdate