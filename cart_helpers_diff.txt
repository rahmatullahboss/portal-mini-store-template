diff --git a/src/app/api/cart/cart-helpers.ts b/src/app/api/cart/cart-helpers.ts
index bcf0e98..b0abeb8 100644
--- a/src/app/api/cart/cart-helpers.ts
+++ b/src/app/api/cart/cart-helpers.ts
@@ -87,6 +87,184 @@ export const resolveUserId = (user: unknown): number | string | null => {
   return numeric
 }
 
+const pickCategoryName = (value: unknown): string => {
+  if (typeof value === 'string') return value
+  if (isRecord(value) && typeof value.name === 'string') return value.name
+  return ''
+}
+
+const pickImage = (itemDoc: Record<string, unknown>): SerializedCartItem['image'] => {
+  const imageValue = itemDoc.image
+  if (isRecord(imageValue) && typeof imageValue.url === 'string') {
+    return {
+      url: imageValue.url,
+      alt: typeof imageValue.alt === 'string' ? imageValue.alt : undefined,
+    }
+  }
+  if (typeof itemDoc.imageUrl === 'string') {
+    return { url: itemDoc.imageUrl }
+  }
+  return undefined
+}
+
+const clampQuantityForItem = (itemDoc: Record<string, unknown>, requested: number): number => {
+  if (!Number.isFinite(requested) || requested <= 0) return 0
+  const limits: number[] = []
+  const candidateKeys = [
+    'maxPerOrder',
+    'maxOrderQuantity',
+    'maxQuantity',
+    'maxPerCustomer',
+    'maxPurchaseQuantity',
+    'inventoryPerCustomer',
+  ]
+  for (const key of candidateKeys) {
+    const raw = (itemDoc as Record<string, unknown>)[key]
+    const value = Number(raw)
+    if (Number.isFinite(value) && value > 0) {
+      limits.push(Math.floor(value))
+    }
+  }
+  if (typeof itemDoc.available === 'boolean' && itemDoc.available === false) {
+    return 0
+  }
+  if (!limits.length) return Math.max(Math.floor(requested), 0)
+  return Math.max(Math.min(Math.floor(requested), Math.min(...limits)), 0)
+}
+
+export const normalizeIncomingItems = (value: unknown): IncomingCartItem[] => {
+  if (!Array.isArray(value)) return []
+  const items: IncomingCartItem[] = []
+  for (const raw of value) {
+    if (!isRecord(raw)) continue
+    const idCandidate = raw.id
+    const quantityRaw = Number(raw.quantity)
+    const quantity = Number.isFinite(quantityRaw) && quantityRaw > 0 ? Math.floor(quantityRaw) : 0
+    if (quantity <= 0) continue
+    if (typeof idCandidate === 'string' || typeof idCandidate === 'number') {
+      items.push({ id: idCandidate, quantity })
+    }
+  }
+  return items
+}
+
+export const buildQuantityMapFromIncoming = (items: IncomingCartItem[]): Map<number, number> => {
+  const map = new Map<number, number>()
+  for (const item of items) {
+    const numericId = toItemId(item.id)
+    if (numericId === null) continue
+    const quantity = Math.max(0, Math.floor(item.quantity))
+    if (quantity <= 0) continue
+    map.set(numericId, (map.get(numericId) ?? 0) + quantity)
+  }
+  return map
+}
+
+export const extractCartQuantities = (doc: unknown): Map<number, number> => {
+  const map = new Map<number, number>()
+  if (!isRecord(doc)) return map
+  const items = doc.items
+  if (!Array.isArray(items)) return map
+  for (const entry of items) {
+    if (!isRecord(entry)) continue
+    const itemId = toItemId(entry.item)
+    const quantityRaw = Number(entry.quantity)
+    const quantity = Number.isFinite(quantityRaw) && quantityRaw > 0 ? Math.floor(quantityRaw) : 0
+    if (itemId === null || quantity <= 0) continue
+    map.set(itemId, (map.get(itemId) ?? 0) + quantity)
+  }
+  return map
+}
+
+export const resolveCartPayload = async (
+  payload: Payload,
+  quantityMap: Map<number, number>,
+): Promise<{
+  lines: CartLine[]
+  serialized: SerializedCartItem[]
+  total: number
+  snapshot: Record<string, number>
+}> => {
+  if (quantityMap.size === 0) {
+    return { lines: [], serialized: [], total: 0, snapshot: {} }
+  }
+
+  const ids = Array.from(quantityMap.keys())
+  const itemsResult = await payload.find({
+    collection: 'items',
+    where: {
+      id: { in: ids },
+    },
+    depth: 2,
+    limit: ids.length,
+  })
+
+  const itemsMap = new Map<number, Record<string, unknown>>()
+  for (const item of itemsResult.docs) {
+    if (!isRecord(item)) continue
+    const numericId = toItemId(item.id)
+    if (numericId === null) continue
+    itemsMap.set(numericId, item)
+  }
+
+  const lines: CartLine[] = []
+  const serialized: SerializedCartItem[] = []
+  const snapshot: Record<string, number> = {}
+  let total = 0
+
+  for (const [itemId, requestedQuantity] of quantityMap.entries()) {
+    const itemDoc = itemsMap.get(itemId)
+    if (!itemDoc) continue
+    const quantity = clampQuantityForItem(itemDoc, requestedQuantity)
+    if (quantity <= 0) continue
+
+    const priceRaw = Number(itemDoc.price)
+    const price = Number.isFinite(priceRaw) && priceRaw >= 0 ? priceRaw : 0
+    total += price * quantity
+
+    lines.push({ item: itemId, quantity })
+    const idRaw = itemDoc.id
+    const id = typeof idRaw === 'string' ? idRaw : String(idRaw)
+
+    serialized.push({
+      id,
+      name: typeof itemDoc.name === 'string' ? itemDoc.name : String(itemDoc.name ?? ''),
+      price,
+      quantity,
+      category: pickCategoryName(itemDoc.category),
+      image: pickImage(itemDoc),
+    })
+
+    snapshot[id] = quantity
+  }
+
+  return { lines, serialized, total, snapshot }
+}
+
+export const getDocId = (doc: unknown): number | string | null => {
+  if (!isRecord(doc)) return null
+  const { id } = doc
+  if (typeof id === 'number' && Number.isFinite(id)) return id
+  if (typeof id === 'string' && id.length > 0) return id
+  return null
+}
+
+export const getSessionIdFromDoc = (doc: unknown): string | null => {
+  if (!isRecord(doc)) return null
+  const sid = doc.sessionId
+  if (typeof sid === 'string' && sid.trim().length > 0) return sid
+  return null
+}
+
+export const generateSessionId = (): string => {
+  try {
+    if (typeof globalThis.crypto?.randomUUID === 'function') {
+      return globalThis.crypto.randomUUID()
+    }
+  } catch {}
+  return Math.random().toString(36).slice(2)
+}
+
 export const findActiveCartForUser = async (
   payload: Payload,
   userId: number | string,
@@ -98,7 +276,10 @@ export const findActiveCartForUser = async (
     depth: 0,
     sort: '-updatedAt',
     where: {
-      and: [{ user: { equals: userId } }, { status: { not_equals: 'recovered' } }],
+      and: [
+        { user: { equals: userId } },
+        { status: { not_equals: 'recovered' } },
+      ],
     },
   })
 
@@ -117,7 +298,10 @@ export const findCartBySession = async (
     depth: 0,
     sort: '-updatedAt',
     where: {
-      and: [{ sessionId: { equals: sessionId } }, { status: { not_equals: 'recovered' } }],
+      and: [
+        { sessionId: { equals: sessionId } },
+        { status: { not_equals: 'recovered' } },
+      ],
     },
   })
 
@@ -138,4 +322,4 @@ export async function createNewCart(payload: Payload, userId?: number | string)
   })
 
   return cart
-}
+}
\ No newline at end of file
