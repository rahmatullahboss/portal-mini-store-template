diff --git a/src/app/api/cart/route.ts b/src/app/api/cart/route.ts
index a5d987b..91d4ca6 100644
--- a/src/app/api/cart/route.ts
+++ b/src/app/api/cart/route.ts
@@ -1,8 +1,71 @@
 import { NextRequest, NextResponse } from 'next/server'
 import { getPayload } from 'payload'
-import { findActiveCartForUser, findCartBySession, createNewCart } from './cart-helpers'
+import {
+  findActiveCartForUser,
+  findCartBySession,
+  createNewCart,
+  extractCartQuantities,
+  resolveCartPayload,
+  getSessionIdFromDoc,
+  generateSessionId,
+} from './cart-helpers'
 import config from '@/payload.config'
 
+const applySessionCookie = (response: NextResponse, sessionId: string | null) => {
+  if (!sessionId) return
+
+  response.cookies.set('dyad_cart_sid', String(sessionId), {
+    path: '/',
+    httpOnly: false,
+    sameSite: 'lax',
+    maxAge: 60 * 60 * 24 * 30,
+  })
+}
+
+export async function GET(request: NextRequest) {
+  try {
+    const payload = await getPayload({ config: await config })
+    const { user } = await payload.auth({ headers: request.headers })
+
+    const userId = user?.id
+    const sessionCandidate = request.cookies.get('dyad_cart_sid')?.value
+
+    let cartDoc: Record<string, unknown> | null = null
+
+    if (userId) {
+      cartDoc = await findActiveCartForUser(payload, userId)
+    }
+
+    if (!cartDoc && sessionCandidate) {
+      cartDoc = await findCartBySession(payload, sessionCandidate)
+    }
+
+    const quantityMap = extractCartQuantities(cartDoc)
+    const { serialized, total: computedTotal, snapshot } = await resolveCartPayload(payload, quantityMap)
+
+    const totalRaw = typeof cartDoc?.['cartTotal'] === 'number' ? cartDoc['cartTotal'] : undefined
+    const total = typeof totalRaw === 'number' ? totalRaw : computedTotal
+
+    const resolvedSessionId =
+      getSessionIdFromDoc(cartDoc) ?? sessionCandidate ?? (serialized.length > 0 ? generateSessionId() : null)
+
+    const response = NextResponse.json({
+      items: serialized,
+      total,
+      sourceUpdatedAt: typeof cartDoc?.['updatedAt'] === 'string' ? cartDoc['updatedAt'] : null,
+      sessionId: resolvedSessionId,
+      snapshot,
+    })
+
+    applySessionCookie(response, resolvedSessionId)
+
+    return response
+  } catch (error) {
+    console.error('Failed to load persisted cart:', error)
+    return NextResponse.json({ error: 'Failed to load cart' }, { status: 500 })
+  }
+}
+
 export async function POST(req: NextRequest) {
   try {
     const payload = await getPayload({ config: await config })
@@ -14,7 +77,7 @@ export async function POST(req: NextRequest) {
 
     if (user) {
       cart = await findActiveCartForUser(payload, user.id)
-      if (cart && cart.id !== cartSessionId) {
+      if (cart && cartSessionId && cartSessionId !== getSessionIdFromDoc(cart)) {
         // a logged-in user should only have one active cart
         // if for some reason we have a mismatch between the session cart and the user's active cart,
         // we should probably merge them
@@ -27,7 +90,12 @@ export async function POST(req: NextRequest) {
       cart = await createNewCart(payload, user?.id)
     }
 
-    const { items: cartItems, customerName, customerEmail, customerNumber } = body
+    const {
+      items: cartItems,
+      customerName,
+      customerEmail,
+      customerNumber,
+    } = body
 
     // update the cart with the new data from the client
     const updatedCart = await payload.update({
@@ -58,4 +126,4 @@ export async function POST(req: NextRequest) {
     console.error('Failed to persist cart:', error)
     return NextResponse.json({ error: 'Failed to persist cart' }, { status: 500 })
   }
-}
+}
\ No newline at end of file
